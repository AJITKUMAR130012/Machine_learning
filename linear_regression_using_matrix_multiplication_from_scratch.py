# -*- coding: utf-8 -*-
"""Linear_regression Using matrix multiplication from scratch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I05ZmWAaGS8CymqotagSR3vUvRj9zk-7
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score 
from sklearn.datasets import make_regression
import numpy as np

X,y=make_regression(n_samples=100,n_features=4,n_informative=4,n_targets=1,noise=20,random_state=20)

X.shape

y.shape

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.33, random_state=5)

X_train.shape,y_train.shape,X_test.shape,y_test.shape

l=LinearRegression()

l.fit(X_train,y_train)

l.score(X_test,y_test)

y_pred1=l.predict(X_test)

r2_score(y_test,y_pred1)

l.intercept_,l.coef_

class MeraLinearfun:
    def __init__(self):
        self.coef=None
        self.intercept=None
    def fit(self,X_train,y_train):
        X_train=np.insert(X_train,0,1,axis=1)
        beta=np.linalg.inv(np.dot(X_train.T,X_train)).dot(X_train.T).dot(y_train)
        self.coef=beta[0]
        self.intercept=beta[1:]
        print(self.coef)
        print(self.intercept)
        print(beta.shape)

Meral=MeraLinearfun()

Meral.fit(X_train,y_train)



X_t

